// Code generated by mockery v2.33.2. DO NOT EDIT.

package store_mock

import (
	context "context"
	store "ecommerece/packages/transaction/store"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// GetAllTransaction provides a mock function with given fields: ctx
func (_m *Store) GetAllTransaction(ctx context.Context) ([]*store.Transaction, error) {
	ret := _m.Called(ctx)

	var r0 []*store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*store.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*store.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionById provides a mock function with given fields: ctx, id
func (_m *Store) GetTransactionById(ctx context.Context, id uuid.UUID) (*store.Transaction, error) {
	ret := _m.Called(ctx, id)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*store.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *store.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertTransaction provides a mock function with given fields: ctx, transaction
func (_m *Store) InsertTransaction(ctx context.Context, transaction store.Transaction) (*store.Transaction, error) {
	ret := _m.Called(ctx, transaction)

	var r0 *store.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, store.Transaction) (*store.Transaction, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, store.Transaction) *store.Transaction); ok {
		r0 = rf(ctx, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, store.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
