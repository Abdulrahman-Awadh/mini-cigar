// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: analytics.proto

package analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnalyticsService_BringTotalSales_FullMethodName       = "/AnalyticsService/BringTotalSales"
	AnalyticsService_BringSalesByProductId_FullMethodName = "/AnalyticsService/BringSalesByProductId"
	AnalyticsService_ListTopFiveCustomers_FullMethodName  = "/AnalyticsService/ListTopFiveCustomers"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	BringTotalSales(ctx context.Context, in *BringTotalSalesRequest, opts ...grpc.CallOption) (*BringTotalSalesResponse, error)
	BringSalesByProductId(ctx context.Context, in *BringSalesByProductIdRequest, opts ...grpc.CallOption) (*BringSalesByProductIdResponse, error)
	ListTopFiveCustomers(ctx context.Context, in *ListTopFiveCustomersRequest, opts ...grpc.CallOption) (*ListTopFiveCustomersResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) BringTotalSales(ctx context.Context, in *BringTotalSalesRequest, opts ...grpc.CallOption) (*BringTotalSalesResponse, error) {
	out := new(BringTotalSalesResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_BringTotalSales_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) BringSalesByProductId(ctx context.Context, in *BringSalesByProductIdRequest, opts ...grpc.CallOption) (*BringSalesByProductIdResponse, error) {
	out := new(BringSalesByProductIdResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_BringSalesByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) ListTopFiveCustomers(ctx context.Context, in *ListTopFiveCustomersRequest, opts ...grpc.CallOption) (*ListTopFiveCustomersResponse, error) {
	out := new(ListTopFiveCustomersResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_ListTopFiveCustomers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility
type AnalyticsServiceServer interface {
	BringTotalSales(context.Context, *BringTotalSalesRequest) (*BringTotalSalesResponse, error)
	BringSalesByProductId(context.Context, *BringSalesByProductIdRequest) (*BringSalesByProductIdResponse, error)
	ListTopFiveCustomers(context.Context, *ListTopFiveCustomersRequest) (*ListTopFiveCustomersResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsServiceServer struct {
}

func (UnimplementedAnalyticsServiceServer) BringTotalSales(context.Context, *BringTotalSalesRequest) (*BringTotalSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BringTotalSales not implemented")
}
func (UnimplementedAnalyticsServiceServer) BringSalesByProductId(context.Context, *BringSalesByProductIdRequest) (*BringSalesByProductIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BringSalesByProductId not implemented")
}
func (UnimplementedAnalyticsServiceServer) ListTopFiveCustomers(context.Context, *ListTopFiveCustomersRequest) (*ListTopFiveCustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopFiveCustomers not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_BringTotalSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BringTotalSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).BringTotalSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_BringTotalSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).BringTotalSales(ctx, req.(*BringTotalSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_BringSalesByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BringSalesByProductIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).BringSalesByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_BringSalesByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).BringSalesByProductId(ctx, req.(*BringSalesByProductIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_ListTopFiveCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopFiveCustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).ListTopFiveCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_ListTopFiveCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).ListTopFiveCustomers(ctx, req.(*ListTopFiveCustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BringTotalSales",
			Handler:    _AnalyticsService_BringTotalSales_Handler,
		},
		{
			MethodName: "BringSalesByProductId",
			Handler:    _AnalyticsService_BringSalesByProductId_Handler,
		},
		{
			MethodName: "ListTopFiveCustomers",
			Handler:    _AnalyticsService_ListTopFiveCustomers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics.proto",
}
