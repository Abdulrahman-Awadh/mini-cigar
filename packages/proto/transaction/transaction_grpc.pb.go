// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: transaction.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransactionService_CreateTransaction_FullMethodName     = "/TransactionService/CreateTransaction"
	TransactionService_GetTransactionById_FullMethodName    = "/TransactionService/GetTransactionById"
	TransactionService_StreamTransactions_FullMethodName    = "/TransactionService/StreamTransactions"
	TransactionService_GetAllTransactions_FullMethodName    = "/TransactionService/GetAllTransactions"
	TransactionService_GetTotalSales_FullMethodName         = "/TransactionService/GetTotalSales"
	TransactionService_GetSalesByProductId_FullMethodName   = "/TransactionService/GetSalesByProductId"
	TransactionService_GetTopFiveCustomersId_FullMethodName = "/TransactionService/GetTopFiveCustomersId"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionByIdResponse, error)
	StreamTransactions(ctx context.Context, in *StreamTransactionsRequest, opts ...grpc.CallOption) (TransactionService_StreamTransactionsClient, error)
	GetAllTransactions(ctx context.Context, in *GetAllTransactionsRequest, opts ...grpc.CallOption) (*GetAllTransactionsResponse, error)
	GetTotalSales(ctx context.Context, in *GetTotalSalesRequest, opts ...grpc.CallOption) (*GetTotalSalesResponse, error)
	GetSalesByProductId(ctx context.Context, in *GetSalesByProductIdRequest, opts ...grpc.CallOption) (*GetSalesByProductIdResponse, error)
	GetTopFiveCustomersId(ctx context.Context, in *GetTopFiveCustomersIdRequest, opts ...grpc.CallOption) (*GetTopFiveCustomersIdResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionService_CreateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionByIdResponse, error) {
	out := new(GetTransactionByIdResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTransactionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) StreamTransactions(ctx context.Context, in *StreamTransactionsRequest, opts ...grpc.CallOption) (TransactionService_StreamTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[0], TransactionService_StreamTransactions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceStreamTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_StreamTransactionsClient interface {
	Recv() (*StreamTransactionsResponse, error)
	grpc.ClientStream
}

type transactionServiceStreamTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionServiceStreamTransactionsClient) Recv() (*StreamTransactionsResponse, error) {
	m := new(StreamTransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) GetAllTransactions(ctx context.Context, in *GetAllTransactionsRequest, opts ...grpc.CallOption) (*GetAllTransactionsResponse, error) {
	out := new(GetAllTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetAllTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTotalSales(ctx context.Context, in *GetTotalSalesRequest, opts ...grpc.CallOption) (*GetTotalSalesResponse, error) {
	out := new(GetTotalSalesResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTotalSales_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetSalesByProductId(ctx context.Context, in *GetSalesByProductIdRequest, opts ...grpc.CallOption) (*GetSalesByProductIdResponse, error) {
	out := new(GetSalesByProductIdResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetSalesByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTopFiveCustomersId(ctx context.Context, in *GetTopFiveCustomersIdRequest, opts ...grpc.CallOption) (*GetTopFiveCustomersIdResponse, error) {
	out := new(GetTopFiveCustomersIdResponse)
	err := c.cc.Invoke(ctx, TransactionService_GetTopFiveCustomersId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility
type TransactionServiceServer interface {
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionByIdResponse, error)
	StreamTransactions(*StreamTransactionsRequest, TransactionService_StreamTransactionsServer) error
	GetAllTransactions(context.Context, *GetAllTransactionsRequest) (*GetAllTransactionsResponse, error)
	GetTotalSales(context.Context, *GetTotalSalesRequest) (*GetTotalSalesResponse, error)
	GetSalesByProductId(context.Context, *GetSalesByProductIdRequest) (*GetSalesByProductIdResponse, error)
	GetTopFiveCustomersId(context.Context, *GetTopFiveCustomersIdRequest) (*GetTopFiveCustomersIdResponse, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (UnimplementedTransactionServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (UnimplementedTransactionServiceServer) StreamTransactions(*StreamTransactionsRequest, TransactionService_StreamTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) GetAllTransactions(context.Context, *GetAllTransactionsRequest) (*GetAllTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) GetTotalSales(context.Context, *GetTotalSalesRequest) (*GetTotalSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalSales not implemented")
}
func (UnimplementedTransactionServiceServer) GetSalesByProductId(context.Context, *GetSalesByProductIdRequest) (*GetSalesByProductIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesByProductId not implemented")
}
func (UnimplementedTransactionServiceServer) GetTopFiveCustomersId(context.Context, *GetTopFiveCustomersIdRequest) (*GetTopFiveCustomersIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopFiveCustomersId not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransactionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionById(ctx, req.(*GetTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_StreamTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).StreamTransactions(m, &transactionServiceStreamTransactionsServer{stream})
}

type TransactionService_StreamTransactionsServer interface {
	Send(*StreamTransactionsResponse) error
	grpc.ServerStream
}

type transactionServiceStreamTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionServiceStreamTransactionsServer) Send(m *StreamTransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionService_GetAllTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetAllTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetAllTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetAllTransactions(ctx, req.(*GetAllTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTotalSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTotalSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTotalSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTotalSales(ctx, req.(*GetTotalSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetSalesByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesByProductIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetSalesByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetSalesByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetSalesByProductId(ctx, req.(*GetSalesByProductIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTopFiveCustomersId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopFiveCustomersIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTopFiveCustomersId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTopFiveCustomersId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTopFiveCustomersId(ctx, req.(*GetTopFiveCustomersIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionService_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _TransactionService_GetTransactionById_Handler,
		},
		{
			MethodName: "GetAllTransactions",
			Handler:    _TransactionService_GetAllTransactions_Handler,
		},
		{
			MethodName: "GetTotalSales",
			Handler:    _TransactionService_GetTotalSales_Handler,
		},
		{
			MethodName: "GetSalesByProductId",
			Handler:    _TransactionService_GetSalesByProductId_Handler,
		},
		{
			MethodName: "GetTopFiveCustomersId",
			Handler:    _TransactionService_GetTopFiveCustomersId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTransactions",
			Handler:       _TransactionService_StreamTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transaction.proto",
}
